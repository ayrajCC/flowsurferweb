// Shape drawing and utility functions

export const ShapeType = {
  PROCESS: 'PROCESS',
  DECISION: 'DECISION',
  DATA: 'DATA',
  LINE: 'LINE',
  TEXT: 'TEXT'
};

export const ConnectionPoint = {
  TOP: 'TOP',
  RIGHT: 'RIGHT',
  BOTTOM: 'BOTTOM',
  LEFT: 'LEFT'
};

// Draw a shape on the canvas context
export function drawShape(ctx, shape) {
  const { type, x1, y1, x2, y2, text, fillColor, strokeColor } = shape;
  
  // Set styles
  ctx.fillStyle = fillColor || '#FFFFFF';
  ctx.strokeStyle = strokeColor || '#000000';
  ctx.lineWidth = 2;
  
  const width = Math.abs(x2 - x1);
  const height = Math.abs(y2 - y1);
  const startX = Math.min(x1, x2);
  const startY = Math.min(y1, y2);
  const centerX = (x1 + x2) / 2;
  const centerY = (y1 + y2) / 2;
  
  switch (type) {
    case ShapeType.PROCESS:
      // Process rectangle
      ctx.beginPath();
      ctx.rect(startX, startY, width, height);
      ctx.fill();
      ctx.stroke();
      break;
      
    case ShapeType.DECISION:
      // Decision diamond
      ctx.beginPath();
      ctx.moveTo(centerX, startY);
      ctx.lineTo(startX + width, centerY);
      ctx.lineTo(centerX, startY + height);
      ctx.lineTo(startX, centerY);
      ctx.closePath();
      ctx.fill();
      ctx.stroke();
      break;
      
    case ShapeType.DATA:
      // Data parallelogram
      const offset = width / 6;
      ctx.beginPath();
      ctx.moveTo(startX + offset, startY);
      ctx.lineTo(startX + width, startY);
      ctx.lineTo(startX + width - offset, startY + height);
      ctx.lineTo(startX, startY + height);
      ctx.closePath();
      ctx.fill();
      ctx.stroke();
      break;
      
    case ShapeType.LINE:
      if (shape.isSelfLoop && shape.selfLoopStartPoint && shape.selfLoopEndPoint) {
        drawSelfLoop(ctx, shape);
      } else {
        // Regular connector line
        ctx.beginPath();
        ctx.moveTo(x1, y1);
        ctx.lineTo(x2, y2);
        ctx.stroke();
        
        // Draw arrow head
        drawArrowHead(ctx, x1, y1, x2, y2);
      }
      break;
      
    case ShapeType.TEXT:
      if (text) {
        ctx.fillStyle = '#000000';
        ctx.font = '16px Arial';
        ctx.textBaseline = 'top';
        ctx.fillText(text, startX, startY);
      }
      break;
  }
  
  // Draw text for non-text shapes
  if (text && type !== ShapeType.TEXT) {
    ctx.fillStyle = '#000000';
    ctx.font = '14px Arial';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    
    // Simple text wrapping for longer texts
    if (text.length > 15) {
      const words = text.split(' ');
      let line = '';
      let y = centerY - 7 * (words.length > 3 ? 3 : words.length);
      
      for (let i = 0; i < words.length; i++) {
        const testLine = line + words[i] + ' ';
        if (testLine.length > 15 && i > 0) {
          ctx.fillText(line, centerX, y);
          line = words[i] + ' ';
          y += 15;
          if (y > centerY + 20) break; // Prevent too many lines
        } else {
          line = testLine;
        }
      }
      ctx.fillText(line, centerX, y);
    } else {
      ctx.fillText(text, centerX, centerY);
    }
  }
}

// Draw arrow head for connectors
function drawArrowHead(ctx, x1, y1, x2, y2) {
  // Calculate the angle of the line
  const angle = Math.atan2(y2 - y1, x2 - x1);
  
  // Length of the arrow head
  const arrowLength = 15;
  
  // Calculate the points of the arrow head
  const x3 = x2 - arrowLength * Math.cos(angle - Math.PI/6);
  const y3 = y2 - arrowLength * Math.sin(angle - Math.PI/6);
  const x4 = x2 - arrowLength * Math.cos(angle + Math.PI/6);
  const y4 = y2 - arrowLength * Math.sin(angle + Math.PI/6);
  
  // Draw the arrow head
  ctx.beginPath();
  ctx.moveTo(x2, y2);
  ctx.lineTo(x3, y3);
  ctx.moveTo(x2, y2);
  ctx.lineTo(x4, y4);
  ctx.stroke();
}

// Draw a self-loop connector with right angles
function drawSelfLoop(ctx, shape) {
  const { x1, y1, x2, y2, selfLoopStartPoint, selfLoopEndPoint } = shape;
  
  // Get the source shape (if available)
  const sourceShape = shape.sourceShape || getShapeFromPoint(x1, y1);
  if (!sourceShape) return;
  
  // Calculate loop dimensions
  const startX = Math.min(sourceShape.x1, sourceShape.x2);
  const startY = Math.min(sourceShape.y1, sourceShape.y2);
  const width = Math.abs(sourceShape.x2 - sourceShape.x1);
  const height = Math.abs(sourceShape.y2 - sourceShape.y1);
  const endX = startX + width;
  const endY = startY + height;
  const centerX = startX + width/2;
  const centerY = startY + height/2;
  
  // Offset for the self-loop
  const loopOffset = Math.max(width, height) * 0.3;
  
  // Calculate middle points based on which sides the connector attaches to
  let mx1, my1, mx2, my2;
  
  switch (selfLoopStartPoint) {
    case ConnectionPoint.TOP:
      mx1 = x1;
      my1 = y1 - loopOffset;
      break;
    case ConnectionPoint.RIGHT:
      mx1 = x1 + loopOffset;
      my1 = y1;
      break;
    case ConnectionPoint.BOTTOM:
      mx1 = x1;
      my1 = y1 + loopOffset;
      break;
    case ConnectionPoint.LEFT:
      mx1 = x1 - loopOffset;
      my1 = y1;
      break;
  }
  
  switch (selfLoopEndPoint) {
    case ConnectionPoint.TOP:
      mx2 = x2;
      my2 = y2 - loopOffset;
      break;
    case ConnectionPoint.RIGHT:
      mx2 = x2 + loopOffset;
      my2 = y2;
      break;
    case ConnectionPoint.BOTTOM:
      mx2 = x2;
      my2 = y2 + loopOffset;
      break;
    case ConnectionPoint.LEFT:
      mx2 = x2 - loopOffset;
      my2 = y2;
      break;
  }
  
  // Draw the loop with right angles
  ctx.beginPath();
  ctx.moveTo(x1, y1);
  ctx.lineTo(mx1, my1);
  
  // Middle segment
  if (selfLoopStartPoint === ConnectionPoint.TOP || selfLoopStartPoint === ConnectionPoint.BOTTOM) {
    ctx.lineTo(mx2, my1);
  } else {
    ctx.lineTo(mx1, my2);
  }
  
  ctx.lineTo(mx2, my2);
  ctx.lineTo(x2, y2);
  ctx.stroke();
  
  // Draw arrow head at the end point
  let arrowAngle = 0;
  switch (selfLoopEndPoint) {
    case ConnectionPoint.TOP: arrowAngle = Math.PI/2; break;    // Pointing down
    case ConnectionPoint.RIGHT: arrowAngle = Math.PI; break;    // Pointing left
    case ConnectionPoint.BOTTOM: arrowAngle = -Math.PI/2; break; // Pointing up
    case ConnectionPoint.LEFT: arrowAngle = 0; break;           // Pointing right
  }
  
  // Draw arrowhead with the correct orientation
  const arrowSize = 10;
  const arrowX1 = x2 - arrowSize * Math.cos(arrowAngle - Math.PI/6);
  const arrowY1 = y2 - arrowSize * Math.sin(arrowAngle - Math.PI/6);
  const arrowX2 = x2 - arrowSize * Math.cos(arrowAngle + Math.PI/6);
  const arrowY2 = y2 - arrowSize * Math.sin(arrowAngle + Math.PI/6);
  
  ctx.beginPath();
  ctx.moveTo(x2, y2);
  ctx.lineTo(arrowX1, arrowY1);
  ctx.moveTo(x2, y2);
  ctx.lineTo(arrowX2, arrowY2);
  ctx.stroke();
}

// Get connection coordinates for a particular point on a shape
export function getConnectionCoordinates(shape, point) {
  const startX = Math.min(shape.x1, shape.x2);
  const startY = Math.min(shape.y1, shape.y2);
  const width = Math.abs(shape.x2 - shape.x1);
  const height = Math.abs(shape.y2 - shape.y1);
  const endX = startX + width;
  const endY = startY + height;
  const centerX = startX + width/2;
  const centerY = startY + height/2;
  
  switch (point) {
    case ConnectionPoint.TOP:
      return [centerX, startY];
    case ConnectionPoint.RIGHT:
      return [endX, centerY];
    case ConnectionPoint.BOTTOM:
      return [centerX, endY];
    case ConnectionPoint.LEFT:
      return [startX, centerY];
    default:
      return [centerX, centerY];
  }
}

// Find which connection point is closest to given coordinates
export function findClosestConnectionPoint(shape, x, y) {
  const points = [
    { point: ConnectionPoint.TOP, coords: getConnectionCoordinates(shape, ConnectionPoint.TOP) },
    { point: ConnectionPoint.RIGHT, coords: getConnectionCoordinates(shape, ConnectionPoint.RIGHT) },
    { point: ConnectionPoint.BOTTOM, coords: getConnectionCoordinates(shape, ConnectionPoint.BOTTOM) },
    { point: ConnectionPoint.LEFT, coords: getConnectionCoordinates(shape, ConnectionPoint.LEFT) }
  ];
  
  let closestPoint = points[0];
  let minDistance = distance(x, y, closestPoint.coords[0], closestPoint.coords[1]);
  
  for (let i = 1; i < points.length; i++) {
    const dist = distance(x, y, points[i].coords[0], points[i].coords[1]);
    if (dist < minDistance) {
      minDistance = dist;
      closestPoint = points[i];
    }
  }
  
  return closestPoint.point;
}

// Utility to find distance between two points
function distance(x1, y1, x2, y2) {
  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
}

// Find if a point is inside a shape
export function isPointInShape(shape, x, y) {
  if (shape.type === ShapeType.LINE) {
    // For lines, check if point is close to the line
    return distanceToLine(x, y, shape.x1, shape.y1, shape.x2, shape.y2) < 10;
  } else {
    // For other shapes, check if point is inside bounding box
    const minX = Math.min(shape.x1, shape.x2);
    const maxX = Math.max(shape.x1, shape.x2);
    const minY = Math.min(shape.y1, shape.y2);
    const maxY = Math.max(shape.y1, shape.y2);
    
    return x >= minX && x <= maxX && y >= minY && y <= maxY;
  }
}

// Calculate distance from point to line segment
function distanceToLine(x, y, x1, y1, x2, y2) {
  const A = x - x1;
  const B = y - y1;
  const C = x2 - x1;
  const D = y2 - y1;
  
  const dot = A * C + B * D;
  const len_sq = C * C + D * D;
  let param = -1;
  
  if (len_sq !== 0) {
    param = dot / len_sq;
  }
  
  let xx, yy;
  
  if (param < 0) {
    xx = x1;
    yy = y1;
  } else if (param > 1) {
    xx = x2;
    yy = y2;
  } else {
    xx = x1 + param * C;
    yy = y1 + param * D;
  }
  
  const dx = x - xx;
  const dy = y - yy;
  
  return Math.sqrt(dx * dx + dy * dy);
}

// Find shape at a given point
export function findShapeAtPoint(shapes, x, y) {
  // Search in reverse order (top-most shapes first)
  for (let i = shapes.length - 1; i >= 0; i--) {
    if (isPointInShape(shapes[i], x, y)) {
      return shapes[i];
    }
  }
  return null;
}

// Create a new shape with enforced aspect ratio
export function createShape(type, x1, y1, x2, y2, text = '') {
  const shape = {
    id: Math.random().toString(36).substr(2, 9),
    type,
    x1,
    y1,
    x2,
    y2,
    text,
    fillColor: '#FFFFFF',
    strokeColor: '#000000'
  };
  
  // Enforce aspect ratio
  enforceAspectRatio(shape);
  
  return shape;
}

// Enforce aspect ratio based on shape type
export function enforceAspectRatio(shape) {
  const { type, x1, y1, x2, y2 } = shape;
  const width = Math.abs(x2 - x1);
  const height = Math.abs(y2 - y1);
  
  switch (type) {
    case ShapeType.PROCESS:
      // Process boxes should be wider than tall with a 2:1 max ratio
      if (height > width) {
        // Make it wider
        if (shape.x2 > shape.x1) {
          shape.x2 = shape.x1 + height;
        } else {
          shape.x1 = shape.x2 + height;
        }
      } else if (width > height * 2) {
        // Limit width to 2x height
        if (shape.x2 > shape.x1) {
          shape.x2 = shape.x1 + height * 2;
        } else {
          shape.x1 = shape.x2 + height * 2;
        }
      }
      break;
      
    case ShapeType.DECISION:
      // Decision diamonds should maintain a 1:1 ratio
      if (width !== height) {
        const size = Math.max(width, height);
        if (shape.x2 > shape.x1) {
          shape.x2 = shape.x1 + size;
        } else {
          shape.x1 = shape.x2 + size;
        }
        
        if (shape.y2 > shape.y1) {
          shape.y2 = shape.y1 + size;
        } else {
          shape.y1 = shape.y2 + size;
        }
      }
      break;
      
    case ShapeType.DATA:
      // Data parallelograms should be wider than tall with a 3:1 max ratio
      if (height > width) {
        // Make it wider
        if (shape.x2 > shape.x1) {
          shape.x2 = shape.x1 + height * 1.5;
        } else {
          shape.x1 = shape.x2 + height * 1.5;
        }
      } else if (width > height * 3) {
        // Limit width to 3x height
        if (shape.x2 > shape.x1) {
          shape.x2 = shape.x1 + height * 3;
        } else {
          shape.x1 = shape.x2 + height * 3;
        }
      }
      break;
  }
  
  return shape;
}